title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
outlierKD(df,rmssd,segment)
outlierKD <- function(dt, var,group) {
var_name <- eval(substitute(var),eval(dt))
group_name <-eval(substitute(group),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name~group_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name~group_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
outlierKD(df,rmssd,segment)
boxplot.stats(df$rmssd)$out
boxplot.stats(rmssd ~ segment, data=df)$out
boxplot.stats()$out
boxplot.stats(df$rmssd~df$segment)$out
boxplot.stats(df$rmssd~df$segment)
x = boxplot(rmssd ~ segment, data=df)
x
x = boxplot(rmssd, data=df)
x = boxplot(df$rmssd)
x
outlierKD <- function(dt, var,group) {
var_name <- eval(substitute(var),eval(dt))
group_name <-eval(substitute(group),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
box = boxplot(var_name~group_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- box$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name~group_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
outlierKD(df,rmssd,segment)
outlierKD(df,HF,segment)
outlierKD(df,HFn,segment)
outlierKD(df,HF,segment)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(df), nrow = 2)), colnames(df))
View(df_norms_shaffer)
View(df_norms_shaffer)
colnames(df)
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
View(df_norms_shaffer)
df_norms_shaffer$hr_mean.min = 40
View(df_norms_shaffer)
df_norms_shaffer$hr_mean = 40
df_norms_shaffer$hr_mean = c(40,200)
df$range = c("min","max")
View(df_norms_shaffer)
df_norms_shaffer$range = c("min","max")
View(df_norms_shaffer)
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
df_norms_shaffer$range = c("min","max")
df_norms_shaffer$hr_mean = c(40,200)
df_norms_shaffer$mean_rr = c(785, 1160)
df_norms_shaffer$sdnn = c(32, 93)
df_norms_shaffer$rmssd = c(19,75)
df_norms_shaffer$LF = c(193,1009)
df_norms_shaffer$LFn = c(30,65)
df_norms_shaffer$HF = c(83,3630)
df_norms_shaffer$HFn = c(16,60)
df_norms_shaffer$LFHF = c(1.1,11.6)
View(df_norms_shaffer)
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn) %>% filter(segment = rest)
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn) %>% filter(segment == rest)
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn,segment) %>% filter(segment == rest)
df$segment
#clear the workspace:
rm(list = ls())
library(dplyr)
library(easystats)
library(naniar)
library(psych)
outlierKD <- function(dt, var,group) {
var_name <- eval(substitute(var),eval(dt))
group_name <-eval(substitute(group),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
box = boxplot(var_name~group_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- box$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name~group_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
data_folder = 'G:/Shared drives/AdmonPsy - Chronic Stress Project/DATA/HRV_totals/validation/'
rest_file_path = paste0(data_folder,'HRV_aggregated_REST_2021-03-24_23-12-26 _clean.csv')
learning_file_path = paste0(data_folder,'HRV_aggregated_LEARNING_2021-03-24_23-17-10 _clean.csv')
reversal_file_path = paste0(data_folder,'HRV_aggregated_REVERSAL_2021-03-24_23-18-40_clean.csv')
lines_rest = readLines(rest_file_path)
lines_learning = readLines(learning_file_path)
lines_reversal = readLines(reversal_file_path)
skip_first = lines_learning[-1]
HRV_learning = read.csv(textConnection(skip_first), header = TRUE, stringsAsFactors = FALSE)
#colnames(HRV_learning) <- paste("learning", colnames(HRV_learning), sep = "_")
colnames(HRV_learning)[1] <- "id"
HRV_learning$segment = rep("learning",nrow(HRV_learning))
skip_first = lines_reversal[-1]
HRV_reversal = read.csv(textConnection(skip_first), header = TRUE, stringsAsFactors = FALSE)
#colnames(HRV_reversal) <- paste("reversal", colnames(HRV_reversal), sep = "_")
colnames(HRV_reversal)[1] <- "id"
HRV_reversal$segment = rep("reversal",nrow(HRV_reversal))
skip_first = lines_rest[-1]
HRV_rest = read.csv(textConnection(skip_first), header = TRUE, stringsAsFactors = FALSE)
#colnames(HRV_rest) <- paste("rest", colnames(HRV_rest), sep = "_")
colnames(HRV_rest)[1] <- "id"
HRV_rest$segment = rep("rest",nrow(HRV_rest))
df = rbind(HRV_rest,HRV_learning)
df = rbind(df,HRV_reversal)
df$id = factor(df$id)
df$segment = factor(df$segment,levels = c("rest", "learning", "reversal"))
df <- df %>%
dplyr::select(c(id = id,
percent_artifact = X._Artifact_peaks,
hr_mean = Mean.HR..beats.min.,
mean_rr = Mean.RR...ms.,
rmssd = HRV_RMSSD_detrend,
pnn50 = HRV_pNN50,
sdnn = HRV_SDNN_detrend,
sdsd = HRV_SDSD_detrend,
LF = HRV_LF,
HF = HRV_HF,
LFHF = HRV_LFHF,
TP = TP..total.spectrum.pow.,
LF_percent = LF.,
HF_percent = HF.,
LFn = HRV_LFn,
HFn = HRV_HFn,
sd1 = HRV_SD1,
sd2 = HRV_SD2,
sd1sd2 = HRV_SD1SD2,
ApEn = HRV_ApEn,
SampEn = HRV_SampEn,
segment))
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn,segment) %>% filter(segment == rest)
df$segment
#clear the workspace:
rm(list = ls())
library(dplyr)
#clear the workspace:
rm(list = ls())
library(dplyr)
library(easystats)
library(naniar)
library(psych)
outlierKD <- function(dt, var,group) {
var_name <- eval(substitute(var),eval(dt))
group_name <-eval(substitute(group),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
box = boxplot(var_name~group_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- box$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name~group_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
data_folder = 'G:/Shared drives/AdmonPsy - Chronic Stress Project/DATA/HRV_totals/validation/'
rest_file_path = paste0(data_folder,'HRV_aggregated_REST_2021-03-24_23-12-26 _clean.csv')
learning_file_path = paste0(data_folder,'HRV_aggregated_LEARNING_2021-03-24_23-17-10 _clean.csv')
reversal_file_path = paste0(data_folder,'HRV_aggregated_REVERSAL_2021-03-24_23-18-40_clean.csv')
lines_rest = readLines(rest_file_path)
lines_learning = readLines(learning_file_path)
lines_reversal = readLines(reversal_file_path)
skip_first = lines_learning[-1]
HRV_learning = read.csv(textConnection(skip_first), header = TRUE, stringsAsFactors = FALSE)
#colnames(HRV_learning) <- paste("learning", colnames(HRV_learning), sep = "_")
colnames(HRV_learning)[1] <- "id"
HRV_learning$segment = rep("learning",nrow(HRV_learning))
skip_first = lines_reversal[-1]
HRV_reversal = read.csv(textConnection(skip_first), header = TRUE, stringsAsFactors = FALSE)
#colnames(HRV_reversal) <- paste("reversal", colnames(HRV_reversal), sep = "_")
colnames(HRV_reversal)[1] <- "id"
HRV_reversal$segment = rep("reversal",nrow(HRV_reversal))
skip_first = lines_rest[-1]
HRV_rest = read.csv(textConnection(skip_first), header = TRUE, stringsAsFactors = FALSE)
#colnames(HRV_rest) <- paste("rest", colnames(HRV_rest), sep = "_")
colnames(HRV_rest)[1] <- "id"
HRV_rest$segment = rep("rest",nrow(HRV_rest))
df = rbind(HRV_rest,HRV_learning)
df = rbind(df,HRV_reversal)
df$id = factor(df$id)
df$segment = factor(df$segment,levels = c("rest", "learning", "reversal"))
df <- df %>%
dplyr::select(c(id = id,
percent_artifact = X._Artifact_peaks,
hr_mean = Mean.HR..beats.min.,
mean_rr = Mean.RR...ms.,
rmssd = HRV_RMSSD_detrend,
pnn50 = HRV_pNN50,
sdnn = HRV_SDNN_detrend,
sdsd = HRV_SDSD_detrend,
LF = HRV_LF,
HF = HRV_HF,
LFHF = HRV_LFHF,
TP = TP..total.spectrum.pow.,
LF_percent = LF.,
HF_percent = HF.,
LFn = HRV_LFn,
HFn = HRV_HFn,
sd1 = HRV_SD1,
sd2 = HRV_SD2,
sd1sd2 = HRV_SD1SD2,
ApEn = HRV_ApEn,
SampEn = HRV_SampEn,
segment))
df$segment
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn,segment) %>% filter(segment == rest)
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn,segment) %>% filter(segment = rest)
data <- df %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn,segment) %>% filter(segment == "rest")
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
df_norms_shaffer$range = c("min","max")
df_norms_shaffer$hr_mean = c(40,200)
df_norms_shaffer$mean_rr = c(785, 1160)
df_norms_shaffer$sdnn = c(32, 93)
df_norms_shaffer$rmssd = c(19,75)
df_norms_shaffer$LF = c(193,1009)
df_norms_shaffer$LFn = c(30,65)
df_norms_shaffer$HF = c(83,3630)
df_norms_shaffer$HFn = c(16,60)
df_norms_shaffer$LFHF = c(1.1,11.6)
View(df_norms_shaffer)
data <- df %>% filter(segment == "rest") %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn) %>%
)
data <- df %>% filter(segment == "rest") %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
df_norms_shaffer$range = c("min","max")
df_norms_shaffer$hr_mean = c(40,200)
df_norms_shaffer$mean_rr = c(785, 1160)
df_norms_shaffer$sdnn = c(32, 93)
df_norms_shaffer$rmssd = c(19,75)
df_norms_shaffer$LF = c(193,1009)
df_norms_shaffer$LFn = c(30,65)
df_norms_shaffer$HF = c(83,3630)
df_norms_shaffer$HFn = c(16,60)
df_norms_shaffer$LFHF = c(1.1,11.6)
View(df_norms_shaffer)
ncol(data)
View(df_norms_shaffer)
i = 1
measure = data[,i]
data[,i]
ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[1,i],1,0)
i = 2
ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[1,i],1,0)
summary(data$mean_rr)
df_norms_shaffer[1,i]
ifelse(measure < df_norms_shaffer[1,i] & measure > df_norms_shaffer[1,i],1,0)
ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
df_norms_shaffer[2,i]
df_norms_shaffer[1,i]
ifelse(measure < df_norms_shaffer[1,i] & measure > df_norms_shaffer[2,i],1,0)
measure = data[,i]
ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
measure > df_norms_shaffer[2,i]
measure < df_norms_shaffer[1,i]
i = 3
measure = data[,i]
measure
ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
colnames(data[,i])
colnames(data[i])
col_name = paste(colnames(data[i]),"outlier", sep = "_")
col_name
colnames(trSamp)[ncol(data)] <- "col_name"
colnames(data)[ncol(data)] <- "col_name"
colnames(data)[ncol(data)] <- col_name
#norms of short term measurment - addopted from Shaffer, & Ginsberg, (2017):
data <- df %>% filter(segment == "rest") %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
df_norms_shaffer$range = c("min","max")
df_norms_shaffer$hr_mean = c(40,200)
df_norms_shaffer$mean_rr = c(785, 1160)
df_norms_shaffer$sdnn = c(32, 93)
df_norms_shaffer$rmssd = c(19,75)
df_norms_shaffer$LF = c(193,1009)
df_norms_shaffer$LFn = c(30,65)
df_norms_shaffer$HF = c(83,3630)
df_norms_shaffer$HFn = c(16,60)
df_norms_shaffer$LFHF = c(1.1,11.6)
#check which subjects
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(data[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
View(data)
df_norms_shaffer$HFn
data$HFn
View(data)
data <- df %>% filter(segment == "rest") %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
df_norms_shaffer$range = c("min","max")
df_norms_shaffer$hr_mean = c(40,200)
df_norms_shaffer$mean_rr = c(785, 1160)
df_norms_shaffer$sdnn = c(32, 93)
df_norms_shaffer$rmssd = c(19,75)
df_norms_shaffer$LF = c(193,1009)
df_norms_shaffer$LFn = c(0.30,0.65)
df_norms_shaffer$HF = c(83,3630)
df_norms_shaffer$HFn = c(0.16,0.60)
df_norms_shaffer$LFHF = c(1.1,11.6)
#check which subjects
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(data[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
View(data)
summarize(data)
summary(data)
sum(data)
lapply(data, sum())
lapply(data, sum
)
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(data[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
norms of short term measurment - addopted from Shaffer, & Ginsberg, (2017):
data <- df %>% filter(segment == "rest") %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
df_norms_shaffer$range = c("min","max")
df_norms_shaffer$hr_mean = c(40,200)
df_norms_shaffer$mean_rr = c(785, 1160)
df_norms_shaffer$sdnn = c(32, 93)
df_norms_shaffer$rmssd = c(19,75)
df_norms_shaffer$LF = c(193,1009)
df_norms_shaffer$LFn = c(0.30,0.65)
df_norms_shaffer$HF = c(83,3630)
df_norms_shaffer$HFn = c(0.16,0.60)
df_norms_shaffer$LFHF = c(1.1,11.6)
#check which subjects
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(data[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(data[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(df_norms_shaffer[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
#norms of short term measurment - addopted from Shaffer, & Ginsberg, (2017):
data <- df %>% filter(segment == "rest") %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
df_norms_shaffer$range = c("min","max")
df_norms_shaffer$hr_mean = c(40,200)
df_norms_shaffer$mean_rr = c(785, 1160)
df_norms_shaffer$sdnn = c(32, 93)
df_norms_shaffer$rmssd = c(19,75)
df_norms_shaffer$LF = c(193,1009)
df_norms_shaffer$LFn = c(0.30,0.65)
df_norms_shaffer$HF = c(83,3630)
df_norms_shaffer$HFn = c(0.16,0.60)
df_norms_shaffer$LFHF = c(1.1,11.6)
#check which subjects
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(df_norms_shaffer[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(df_norms_shaffer[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
#norms of short term measurment - addopted from Shaffer, & Ginsberg, (2017):
data <- df %>% filter(segment == "rest") %>% select(hr_mean,mean_rr,rmssd,sdnn,LF,HF,LFHF,LFn,HFn)
df_norms_shaffer <- setNames(data.frame(matrix(ncol =  ncol(data), nrow = 2)), colnames(data))
df_norms_shaffer$range = c("min","max")
df_norms_shaffer$hr_mean = c(40,200)
df_norms_shaffer$mean_rr = c(785, 1160)
df_norms_shaffer$sdnn = c(32, 93)
df_norms_shaffer$rmssd = c(19,75)
df_norms_shaffer$LF = c(193,1009)
df_norms_shaffer$LFn = c(0.30,0.65)
df_norms_shaffer$HF = c(83,3630)
df_norms_shaffer$HFn = c(0.16,0.60)
df_norms_shaffer$LFHF = c(1.1,11.6)
#check which subjects
for (i in 1:ncol(data)){
measure = data[,i]
data$outlier = ifelse(measure < df_norms_shaffer[1,i] | measure > df_norms_shaffer[2,i],1,0)
col_name = paste(colnames(df_norms_shaffer[i]),"outlier", sep = "_")
colnames(data)[ncol(data)] <- col_name
}
lapply(data, sum)
data$LFn
data$rmssd[data$rmssd_outlier == 1]
df$id[data$rmssd_outlier == 1]
data$LFn[data$LFn_outlier == 1]
